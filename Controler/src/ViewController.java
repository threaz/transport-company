import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Implements logic of the interaction between View and Model.
 * ViewController is implemented as ActionListener which responds to
 * actionPerformed signals coming from View elements.
 */

public class ViewController implements ActionListener {

    public enum LoginState                { OK_LOGIN, WRONG_PASSWD, NOT_IN_DATABASE };
    public enum RegisterState             { OK_REGISTER, CUSTOMER_EXISTS };

    private ReservationSystem reservationSystem;
    private ClientDatabase    database;

    /**
     * Create ViewController.
     *
     * @param reservationSystem system that handles reservations performed by customers
     * @param clientDatabase database that manages customers
     */
    public ViewController(ReservationSystem reservationSystem, ClientDatabase clientDatabase)
    {
        this.reservationSystem = reservationSystem;
        this.database          = clientDatabase;
    }

    /**
     * Write entry containing customer data into database.
     * @param name name of the customer
     * @param address address of the customer(city, street, house number etc.)
     * @param email email address of the customer
     * @param passwd customer's password
     * @return status of the registering operation
     */
    public RegisterState addCustomerToDatabase(String name, String address, String email, String passwd)
    {
        if(customerExistsInDatabase(email))
            return RegisterState.CUSTOMER_EXISTS;

        database.addCustomer(name, address, email, passwd);
        return RegisterState.OK_REGISTER;
    }

    /**
     * Perform customer login. This procedure include checking if
     * the customer really exist in the database of customers.
     * @param email email of the customer
     * @param passwd password of the customer
     * @return status of the logging operation
     */
    public LoginState loginCustomer(String email, String passwd)
    {
        if(! customerExistsInDatabase(email))
            return LoginState.NOT_IN_DATABASE;
        else if(! database.customerPasswdCorrect(email, passwd))
            return LoginState.WRONG_PASSWD;

        return LoginState.OK_LOGIN;
    }

    /**
     * Check whether the customer exist in the database.
     * @param email email of the customer
     * @return user's existence in database status
     */
    public boolean customerExistsInDatabase(String email)
    {
        return database.customerExists(email);
    }

    /**
     * Parse input coming from notifications generated by the View elements.
     * Remove redundant characters that are necessary during transporting phase.
     * Parsed data can be further used in responses to these elements.
     * @param msg message coming from View elements
     * @return parsed data
     */
    private String[] parseInputMessage(String msg)
    {
        List<String> matchList = new ArrayList<String>();

        Pattern regex = Pattern.compile("[^\\s\"']+|\"([^\"]*)\"|'([^']*)'");
        Matcher regexMatcher = regex.matcher(msg);

        while (regexMatcher.find())
            if (regexMatcher.group(1) != null)
                matchList.add(regexMatcher.group(1));
            else if (regexMatcher.group(2) != null)
                matchList.add(regexMatcher.group(2));
            else
                matchList.add(regexMatcher.group());


        String[] res = matchList.toArray(new String[0]);

        return res;
    }

    @Override
    public void actionPerformed(ActionEvent actionEvent) {

        String   msg  = actionEvent.getActionCommand();
        String[] msgs = parseInputMessage(msg);

        // TODO: remove this debug message
        System.out.println(actionEvent.getActionCommand());


        String mail;
        Customer customer;
        int travelID, placeID;

        switch(msgs[0])
        {
            case "[Login]":

                LoginView lw = (LoginView)actionEvent.getSource();
                LoginState st = loginCustomer(msgs[1], msgs[2]);

                lw.userLoggedIn(st);
                break;

            case "[Register]":

                RegisterCustomerView rw = (RegisterCustomerView) actionEvent.getSource();
                RegisterState rs = addCustomerToDatabase(msgs[1], msgs[2], msgs[3], msgs[4]);

                rw.userRegisteredIn(rs);
                break;

            case "[TravelSearch]":

                TravelSearchingView tsw = (TravelSearchingView)actionEvent.getSource();

                List<Travel> airplaneTravels = reservationSystem.getAvailableAirplaneTravels();
                List<Travel> coachTravels    = reservationSystem.getAvailableCoachTravels();

                String from = "[TravelSearch::From] ";
                for(Travel tr : airplaneTravels)
                    from += tr.getFrom() + " ";
                for(Travel tr : coachTravels)
                    from += tr.getFrom() + " ";

                tsw.receivedData(from);

                String to = "[TravelSearch::To] ";
                for(Travel tr : airplaneTravels)
                    to += tr.getTo() + " ";
                for(Travel tr : coachTravels)
                    to += tr.getTo() + " ";

                tsw.receivedData(to);
                break;

            case "[GetListOfTravels]":

                TravelSearchingView tsw1 = (TravelSearchingView)actionEvent.getSource();

                String restOfMessage = "";
                for(int i = 1; i < msgs.length; ++i)
                    restOfMessage += msgs[i] + " ";

                List<Travel> trls = reservationSystem.getSelectedTravels(restOfMessage);

                tsw1.receivedTravels(trls);

                break;

            case "[TempReservePlace]":

                String customerEmail = msgs[1];
                travelID      = Integer.parseInt(msgs[2]);

                List<Integer> placesIDs = new ArrayList<>();

                for(int i = 3; i < msgs.length; ++i)
                    placesIDs.add(Integer.parseInt(msgs[i]));

                customer = database.findCustomer(customerEmail);

                Travel t;
                for(int place : placesIDs)
                {
                    reservationSystem.temporarilyReservePlace(travelID, place);
                    t = reservationSystem.getSelectedTravel(travelID);

                    Order o = new Order(travelID, place, t.getPlaceCost(place), customerEmail);

                    customer.addTemporarilyOrder(o);
                }

                break;

            case "[ProfileInfo]":

                ProfileEditView pew = (ProfileEditView)actionEvent.getSource();
                mail                = msgs[1];
                customer            = database.findCustomer(mail);
                String passwd       = database.getCustomerPassword(mail);

                pew.profieInfoDelivered(customer, passwd);

                break;

            case "[EditProfileInfo]":

                mail              = msgs[1];

                String newName    = msgs[2];
                String newAddress = msgs[3];
                String newPasswd  = msgs[4];

                System.out.println(newName + " " + newAddress + " " + newPasswd);

                pew = (ProfileEditView)actionEvent.getSource();
                database.editCustomer(mail, newName, newAddress, newPasswd);

                pew.profieInfoEdited();

                break;

            case "[RefreshBasket]":

                mail = msgs[1];
                customer = database.findCustomer(mail);

                BasketView bw = (BasketView)actionEvent.getSource();

                List<Order>  orders  = customer.getTemporarilyOrders();
                List<Travel> travels = new ArrayList<>();

                for(Order o : orders) {
                    travelID = o.getTravelID();
                    t = reservationSystem.getSelectedTravel(travelID);

                    if(! travels.contains(t))
                        travels.add(t);
                }

                bw.ordersDelivered(orders, travels);

                break;

            case "[ProceedWithUserOrder]":

                mail = msgs[1];
                customer = database.findCustomer(mail);

                orders = customer.getTemporarilyOrders();
                customer.clearTemporarilyOrders();

                for(Order o : orders)
                    customer.addPastOrderID(o.getID());

                reservationSystem.placeOrders(orders);

                break;

            case "[DeleteUserOrder]":

                mail     = msgs[1];
                travelID = Integer.parseInt(msgs[2]);
                placeID  = Integer.parseInt(msgs[3]);

                customer = database.findCustomer(mail);
                customer.removeTemporarilyOrder(travelID, placeID);
                reservationSystem.removeTemporarilyReservedPlace(travelID, placeID);

                bw = (BasketView)actionEvent.getSource();

                bw.orderDeleted(travelID, placeID);

                break;

            default:
                System.err.println("Unknown command.");
                break;
        }

        System.out.println("Debug message");
    }
}
